import { ref } from 'vue';

/**
 * ‰∏Ä‰∏™Ê∑∑ÂêàÈü≥È¢ëÁÆ°ÁêÜÂô®Á±ªÔºå‰ºòÂÖà‰ΩøÁî® Web Audio API ‰ª•Ëé∑ÂæóÊõ¥‰ΩéÁöÑÂª∂ËøüÂíåÊõ¥Â•ΩÁöÑÊÄßËÉΩÔºå
 * Âú®‰∏çÊîØÊåÅÊàñÁßªÂä®ËÆæÂ§á‰∏äÂàôÂõûÈÄÄÂà∞‰ΩøÁî® HTMLAudioElement„ÄÇ
 * Ëøô‰∏™Á±ªÊú¨Ë∫´Âè™ÂÖ≥ÂøÉÂ¶Ç‰ΩïÊí≠ÊîæÁªôÂÆöÁöÑÈü≥È¢ëÊ∫ê(URL)Ôºå‰∏çÂÖ≥ÂøÉ‰∏öÂä°ÈÄªËæë„ÄÇ
 */
class HybridAudioManager {
    constructor() {
        this.useWebAudio = false;
        this.audioContext = null;
        this.bgmGainNode = null;
        this.sfxGainNode = null;
        this.bgmSource = null;
        this.bgmBuffer = null;
        this.sfxBuffers = new Map();
        this.bgmAudio = null;
        this.sfxAudioPool = new Map();
        this.bgmVolume = 0.5;
        this.sfxVolume = 0.7;
        this.bgmPlaying = false;
        this.sfxEnabled = true;
        this.initialized = false;
        this.isMobile = this.detectMobile();
    }

    detectMobile() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || (navigator.maxTouchPoints && navigator.maxTouchPoints > 2); }
    
    async init() {
        if (this.initialized) return;
        // Âú®ÈùûÁßªÂä®ËÆæÂ§á‰∏ä‰∏îÊîØÊåÅAudioContextÊó∂ÔºåÂ∞ùËØïÂàùÂßãÂåñWeb Audio
        if (!this.isMobile && window.AudioContext) {
            try {
                await this.initWebAudio();
                this.useWebAudio = true;
                console.log("üîä Èü≥È¢ëÁÆ°ÁêÜÂô®: Web Audio API Â∑≤ÊøÄÊ¥ª„ÄÇ");
            } catch (e) {
                this.initFallback();
                console.warn("üîä Èü≥È¢ëÁÆ°ÁêÜÂô®: Web Audio API ÂàùÂßãÂåñÂ§±Ë¥•ÔºåÂõûÈÄÄÂà∞ HTML Audio„ÄÇ", e);
            }
        } else {
            this.initFallback();
        }
        this.initialized = true;
    }

    async initWebAudio() {
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        this.bgmGainNode = this.audioContext.createGain();
        this.sfxGainNode = this.audioContext.createGain();
        this.bgmGainNode.connect(this.audioContext.destination);
        this.sfxGainNode.connect(this.audioContext.destination);
        this.bgmGainNode.gain.value = this.bgmVolume;
        this.sfxGainNode.gain.value = this.sfxVolume;
        // Â¶ÇÊûúÁî®Êà∑‰∏éÈ°µÈù¢‰∫§‰∫íÂâçÈü≥È¢ë‰∏ä‰∏ãÊñáË¢´ÊåÇËµ∑ÔºåÈúÄË¶ÅÊÅ¢Â§çÂÆÉ
        if (this.audioContext.state === 'suspended') {
            await this.audioContext.resume();
        }
    }

    initFallback() {
        this.useWebAudio = false;
        console.log("üîä Èü≥È¢ëÁÆ°ÁêÜÂô®: ‰ΩøÁî® HTML Audio Ê®°Âºè„ÄÇ");
    }

    async loadAudioBuffer(url) {
        if (!this.useWebAudio || !this.audioContext) return null;
        try {
            const response = await fetch(url);
            const arrayBuffer = await response.arrayBuffer();
            return await this.audioContext.decodeAudioData(arrayBuffer);
        } catch (e) {
            console.error(`Ëß£Á†ÅÈü≥È¢ëÊï∞ÊçÆÂ§±Ë¥•: ${url}`, e);
            return null;
        }
    }

    // BGMÂè™Êé•Âèó‰∏Ä‰∏™Ê∫êURL
    async playBgm(src) {
        if (!this.initialized) await this.init();
        if (this.useWebAudio) await this.playBgmWebAudio(src);
        else await this.playBgmFallback(src);
    }

    async playBgmWebAudio(src) {
        try {
            if (this.audioContext.state === 'suspended') await this.audioContext.resume();
            if (this.bgmSource) this.bgmSource.stop();
            this.bgmBuffer = await this.loadAudioBuffer(src);
            if (!this.bgmBuffer) return await this.playBgmFallback(src); // Â¶ÇÊûúËß£Á†ÅÂ§±Ë¥•ÔºåÂ∞ùËØïÂõûÈÄÄ
            this.bgmSource = this.audioContext.createBufferSource();
            this.bgmSource.buffer = this.bgmBuffer;
            this.bgmSource.loop = true;
            this.bgmSource.connect(this.bgmGainNode);
            this.bgmSource.start();
            this.bgmPlaying = true;
        } catch (e) {
            await this.playBgmFallback(src); // ‰ªª‰ΩïÈîôËØØÈÉΩÂ∞ùËØïÂõûÈÄÄ
        }
    }

    async playBgmFallback(src) {
        try {
            if (this.bgmAudio) this.bgmAudio.pause();
            this.bgmAudio = new Audio(src);
            this.bgmAudio.loop = true;
            this.bgmAudio.volume = this.bgmVolume;
            if (this.isMobile) this.bgmAudio.load(); // Âú®ÁßªÂä®Á´ØÂª∫ËÆÆÂÖàload
            const playPromise = this.bgmAudio.play();
            if (playPromise) await playPromise;
            this.bgmPlaying = true;
        } catch (e) {
            this.bgmPlaying = false;
            throw e;
        }
    }

    // SFX‰πüÂè™Êé•Âèó‰∏Ä‰∏™Ê∫êURL
    async playSfx(src) {
        console.log(`üîä playSfx Ë∞ÉÁî® - Èü≥ÊïàÂêØÁî®: ${this.sfxEnabled}, Â∑≤ÂàùÂßãÂåñ: ${this.initialized}`);
        if (!this.sfxEnabled || !this.initialized) {
            console.log(`üîá Ë∑≥ËøáÈü≥ÊïàÊí≠Êîæ - Èü≥ÊïàÂêØÁî®: ${this.sfxEnabled}, Â∑≤ÂàùÂßãÂåñ: ${this.initialized}`);
            return;
        }

        console.log(`üîä ÈÄâÊã©Êí≠ÊîæÊñπÂºè - WebAudio: ${this.useWebAudio}`);
        if (this.useWebAudio) {
            await this.playSfxWebAudio(src);
        } else {
            await this.playSfxFallback(src);
        }
    }

    async playSfxWebAudio(src) {
        try {
            if (this.audioContext.state === 'suspended') await this.audioContext.resume();
            if (!this.sfxBuffers.has(src)) {
                const buffer = await this.loadAudioBuffer(src);
                if (buffer) this.sfxBuffers.set(src, buffer);
            }
            const buffer = this.sfxBuffers.get(src);
            if (!buffer) return await this.playSfxFallback(src); // Ëß£Á†ÅÂ§±Ë¥•ÂàôÂõûÈÄÄ
            const sourceNode = this.audioContext.createBufferSource();
            sourceNode.buffer = buffer;
            sourceNode.connect(this.sfxGainNode);
            sourceNode.start();
        } catch (e) {
            await this.playSfxFallback(src); // ‰ªª‰ΩïÈîôËØØÈÉΩÂ∞ùËØïÂõûÈÄÄ
        }
    }

    async playSfxFallback(src) {
        const fileName = src.split('/').pop();
        console.log(`üîä [Fallback] ÂºÄÂßãÊí≠ÊîæÈü≥Êïà: ${fileName}`);

        try {
            if (!this.sfxAudioPool.has(src)) {
                console.log(`üîä [Fallback] ÂàõÂª∫Êñ∞ÁöÑÈü≥È¢ëÊ±†: ${fileName}`);
                this.sfxAudioPool.set(src, []);
            }

            const pool = this.sfxAudioPool.get(src);
            let audio = pool.find(a => a.paused || a.ended);

            if (!audio) {
                console.log(`üîä [Fallback] ÂàõÂª∫Êñ∞ÁöÑ Audio ÂØπË±°: ${fileName}`);
                audio = new Audio(src);

                // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®Áî®‰∫éË∞ÉËØï
                audio.addEventListener('loadstart', () => console.log(`üîä [${fileName}] ÂºÄÂßãÂä†ËΩΩ`));
                audio.addEventListener('canplay', () => console.log(`üîä [${fileName}] ÂèØ‰ª•Êí≠Êîæ`));
                audio.addEventListener('play', () => console.log(`üîä [${fileName}] ÂºÄÂßãÊí≠Êîæ`));
                audio.addEventListener('ended', () => console.log(`üîä [${fileName}] Êí≠ÊîæÁªìÊùü`));
                audio.addEventListener('error', (e) => console.error(`üîä [${fileName}] Êí≠ÊîæÈîôËØØ:`, e));

                pool.push(audio);
                if (pool.length > 3) {
                    console.log(`üîä [Fallback] Ê∏ÖÁêÜÈü≥È¢ëÊ±†ÔºåÁßªÈô§ÊóßÂØπË±°`);
                    pool.shift();
                }
            } else {
                console.log(`üîä [Fallback] Â§çÁî®Áé∞Êúâ Audio ÂØπË±°: ${fileName}`);
            }

            audio.currentTime = 0;

            // Á°Æ‰øùÈü≥ÈáèÂÄºÊúâÊïà
            const validVolume = isNaN(this.sfxVolume) ? 0.7 : this.sfxVolume;
            audio.volume = validVolume;
            console.log(`üîä [Fallback] ËÆæÁΩÆÈü≥Èáè: ${validVolume} for ${fileName}`);

            const playPromise = audio.play();
            if (playPromise) {
                await playPromise;
                console.log(`‚úÖ [Fallback] Èü≥ÊïàÊí≠ÊîæÊàêÂäü: ${fileName}`);
            }
        } catch (e) {
            console.error(`‚ùå [Fallback] Èü≥ÊïàÊí≠ÊîæÂ§±Ë¥•: ${fileName}`, e);
            throw e;
        }
    }

    setBgmVolume(volume) { this.bgmVolume = Math.max(0, Math.min(1, volume)); if (this.useWebAudio && this.bgmGainNode) this.bgmGainNode.gain.value = this.bgmVolume; else if (this.bgmAudio) this.bgmAudio.volume = this.bgmVolume; }
    setSfxVolume(volume) { this.sfxVolume = Math.max(0, Math.min(1, volume)); if (this.useWebAudio && this.sfxGainNode) this.sfxGainNode.gain.value = this.sfxVolume; this.sfxAudioPool.forEach(p => p.forEach(a => a.volume = this.sfxVolume)); }
    pauseBgm() {
        console.log('üéµ AudioManager.pauseBgm Ë¢´Ë∞ÉÁî®');
        if (this.useWebAudio && this.bgmSource && this.bgmPlaying) {
            this.bgmSource.stop();
            this.bgmSource = null;
        } else if (this.bgmAudio && !this.bgmAudio.paused) {
            this.bgmAudio.pause();
        }
        this.bgmPlaying = false;
        console.log('üéµ AudioManager BGM Â∑≤ÊöÇÂÅú');
    }
    resumeBgm() {
        console.log('üéµ AudioManager.resumeBgm Ë¢´Ë∞ÉÁî®');
        if (this.useWebAudio && this.bgmBuffer && !this.bgmPlaying) {
            try {
                this.bgmSource = this.audioContext.createBufferSource();
                this.bgmSource.buffer = this.bgmBuffer;
                this.bgmSource.loop = true;
                this.bgmSource.connect(this.bgmGainNode);
                this.bgmSource.start();
                this.bgmPlaying = true;
                console.log('üéµ AudioManager BGM WebAudio ÊÅ¢Â§çÊàêÂäü');
            } catch (e) {
                console.error('‚ùå AudioManager BGM WebAudio ÊÅ¢Â§çÂ§±Ë¥•:', e);
            }
        } else if (this.bgmAudio && this.bgmAudio.paused) {
            this.bgmAudio.play().then(() => {
                this.bgmPlaying = true;
                console.log('üéµ AudioManager BGM HTML5 Audio ÊÅ¢Â§çÊàêÂäü');
            }).catch(e => {
                console.error('‚ùå AudioManager BGM HTML5 Audio ÊÅ¢Â§çÂ§±Ë¥•:', e);
            });
        }
    }
    toggleSfx() { this.sfxEnabled = !this.sfxEnabled; return this.sfxEnabled; }
    close() { if (this.audioContext) this.audioContext.close(); }
}

/**
 * ÂØºÂá∫ÁöÑÁªÑÂêàÂºèÂáΩÊï∞ (Composable)
 * @param {object} sfxMap - ‰∏Ä‰∏™‰ªéÈü≥ÊïàÂêçÂà∞URLÁöÑÊò†Â∞ÑÂØπË±°
 * @returns Êö¥Èú≤ÁªôVueÁªÑ‰ª∂‰ΩøÁî®ÁöÑÁä∂ÊÄÅÂíåÊñπÊ≥ï
 */
export function useAudioManager(sfxMap) {
    const audioManager = new HybridAudioManager();
    const bgmPlaying = ref(audioManager.bgmPlaying);
    const sfxEnabled = ref(audioManager.sfxEnabled);

    // Èü≥ÊïàÊí≠ÊîæÁä∂ÊÄÅË∑üË∏™
    const sfxPlayingStatus = new Map();
    const sfxLoadStatus = new Map();

    // Ê£ÄÊü•Èü≥ÊïàÊñá‰ª∂ÊòØÂê¶ÂèØËÆøÈóÆ
    const checkSfxAvailability = async () => {
        console.log('üîç ===== Èü≥ÊïàÊñá‰ª∂ÂèØÁî®ÊÄßÊ£ÄÊü• =====');
        for (const [name, src] of Object.entries(sfxMap)) {
            try {
                const response = await fetch(src, { method: 'HEAD' });
                const status = response.ok ? '‚úÖ ÂèØÁî®' : '‚ùå ‰∏çÂèØÁî®';
                sfxLoadStatus.set(name, response.ok);
                console.log(`${status} ${name}: ${src} (Áä∂ÊÄÅ: ${response.status})`);
            } catch (error) {
                sfxLoadStatus.set(name, false);
                console.log(`‚ùå ÁΩëÁªúÈîôËØØ ${name}: ${src} - ${error.message}`);
            }
        }
        console.log('üîç ===== Èü≥ÊïàÊ£ÄÊü•ÂÆåÊàê =====');
    };

    // ÁÆÄÂåñÁöÑÈü≥ÊïàÊí≠ÊîæÂáΩÊï∞ÔºåÁßªÈô§Â§çÊùÇÁöÑÈòüÂàóÁÆ°ÁêÜ
    const playNamedSfx = async (name) => {
        const timestamp = Date.now();
        console.log(`üéµ [${timestamp}] ËØ∑Ê±ÇÊí≠ÊîæÈü≥Êïà: ${name}`);

        if (!sfxEnabled.value) {
            console.log(`üîá [${timestamp}] Èü≥ÊïàÂ∑≤Á¶ÅÁî®ÔºåË∑≥Ëøá: ${name}`);
            return;
        }

        const src = sfxMap[name];
        if (!src) {
            console.error(`‚ùå [${timestamp}] Èü≥ÊïàÂêçÊú™Âú® sfxMap ‰∏≠ÊâæÂà∞: ${name}`);
            console.log('üìã ÂèØÁî®ÁöÑÈü≥Êïà:', Object.keys(sfxMap));
            return;
        }

        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶ÂèØÁî®
        if (sfxLoadStatus.has(name) && !sfxLoadStatus.get(name)) {
            console.error(`‚ùå [${timestamp}] Èü≥ÊïàÊñá‰ª∂‰∏çÂèØÁî®: ${name}`);
            return;
        }

        try {
            console.log(`üéµ [${timestamp}] ÂºÄÂßãÊí≠ÊîæÈü≥Êïà: ${name} -> ${src}`);
            sfxPlayingStatus.set(name, timestamp);

            // Áõ¥Êé•Êí≠ÊîæÔºå‰∏ç‰ΩøÁî®Â§çÊùÇÁöÑÈòüÂàóÁÆ°ÁêÜ
            await audioManager.playSfx(src);

            console.log(`‚úÖ [${timestamp}] Èü≥ÊïàÊí≠ÊîæÂÆåÊàê: ${name}`);
        } catch (e) {
            console.error(`‚ùå [${timestamp}] Êí≠ÊîæÈü≥ÊïàÂ§±Ë¥•: ${name}`, e);
        } finally {
            sfxPlayingStatus.delete(name);
        }
    };

    // BGMÊí≠ÊîæÂáΩÊï∞‰øùÊåÅ‰∏çÂèòÔºåÂÆÉÁõ¥Êé•Êé•Êî∂URL
    const playBgm = async (src) => {
        if (!src) return;
        console.log('üéµ playBgm Ë¢´Ë∞ÉÁî®ÔºåÊ∫ê:', src);
        try {
            await audioManager.playBgm(src);
            bgmPlaying.value = true;
            console.log('üéµ playBgm ÊàêÂäüÔºåÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞‰∏∫:', bgmPlaying.value);
        } catch (e) {
            bgmPlaying.value = false;
            console.error('‚ùå playBgm Â§±Ë¥•:', e);
            throw e;
        }
    };

    const toggleBgm = () => {
        if (bgmPlaying.value) {
            audioManager.pauseBgm();
        } else {
            audioManager.resumeBgm();
        }
        bgmPlaying.value = audioManager.bgmPlaying;
    };

    const toggleSfx = () => {
        sfxEnabled.value = audioManager.toggleSfx();
    };

    const activateAudioOnMobile = async () => {
        if (audioManager.isMobile && !audioManager.initialized) {
            await audioManager.init();
            // Â∞ùËØïÊí≠Êîæ‰∏Ä‰∏™ÈùôÈü≥ÁöÑÈü≥È¢ëÊù•‚ÄúËß£ÈîÅ‚ÄùÁßªÂä®Á´ØÊµèËßàÂô®ÁöÑÈü≥È¢ëÊí≠ÊîæÈôêÂà∂
            try {
                const s = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABgAZGF0YQAAAAA=');
                s.volume = 0;
                await s.play();
            } catch (e) {
                // ÈùôÈªòÂ§ÑÁêÜÔºåÂç≥‰ΩøÁî®Êà∑Ê≤°Êúâ‰∫§‰∫íÂØºËá¥Â§±Ë¥•Ôºå‰πü‰∏çÂΩ±ÂìçÂêéÁª≠Êìç‰Ωú
            }
        }
    };

    // Èü≥ÊïàÊµãËØïÂáΩÊï∞
    const testAllSfx = async () => {
        console.log('üß™ ===== ÂºÄÂßãÂÖ®Èù¢Èü≥ÊïàÊµãËØï =====');

        // È¶ñÂÖàÊ£ÄÊü•Êñá‰ª∂ÂèØÁî®ÊÄß
        await checkSfxAvailability();

        console.log('üß™ ÂºÄÂßãÈÄê‰∏™ÊµãËØïÈü≥ÊïàÊí≠Êîæ...');
        const sfxNames = Object.keys(sfxMap);

        for (const name of sfxNames) {
            console.log(`üß™ ÊµãËØïÈü≥Êïà: ${name}`);
            try {
                await playNamedSfx(name);
                await new Promise(resolve => setTimeout(resolve, 800)); // Èó¥Èöî800msÔºåÁ°Æ‰øùÊí≠ÊîæÂÆåÊàê
            } catch (e) {
                console.error(`‚ùå Èü≥ÊïàÊµãËØïÂ§±Ë¥•: ${name}`, e);
            }
        }
        console.log('üß™ ===== Èü≥ÊïàÊµãËØïÂÆåÊàê =====');
    };

    // ÂçïÁã¨ÊµãËØïÁâπÂÆöÈü≥Êïà
    const testSingleSfx = async (name) => {
        console.log(`üß™ ÂçïÁã¨ÊµãËØïÈü≥Êïà: ${name}`);
        await playNamedSfx(name);
    };

    // ËøîÂõûÊâÄÊúâÈúÄË¶ÅË¢´VueÁªÑ‰ª∂‰ΩøÁî®ÁöÑÁä∂ÊÄÅÂíåÊñπÊ≥ï
    return {
        audioManager,
        bgmPlaying,
        sfxEnabled,
        playNamedSfx,
        playBgm,
        toggleBgm,
        toggleSfx,
        activateAudioOnMobile,
        testAllSfx, // Ê∑ªÂä†ÊµãËØïÂáΩÊï∞
    };
}